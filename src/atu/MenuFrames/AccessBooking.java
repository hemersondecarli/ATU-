/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package atu.MenuFrames;


import atu.Class.ConnectionDB;
import atu.Class.Role;
import atu.StudentFrames.StudentFrame;
import atu.TeacherFrames.TeacherFrame;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author King
 */
public class AccessBooking extends javax.swing.JFrame {

    private Map<Object, Object> bookingMap;
    int idAccount;
    String rol;
    
    public AccessBooking() {
        initComponents();
    }
    
    public AccessBooking(String rol, int idAccount) {
        initComponents();
        this.rol = rol;
        this.idAccount = idAccount;
        loadBooking();
        loadBookingUser();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableBooking = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableBooking1 = new javax.swing.JTable();
        joinBookingButton = new javax.swing.JButton();
        exitBookingButton = new javax.swing.JButton();

        tableBooking.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableBooking.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane1.setViewportView(tableBooking);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("BOOKING");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Back");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        tableBooking1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableBooking1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane2.setViewportView(tableBooking1);

        joinBookingButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        joinBookingButton.setText("JOIN");
        joinBookingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinBookingButtonActionPerformed(evt);
            }
        });

        exitBookingButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        exitBookingButton.setText("LEAVE");
        exitBookingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBookingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(292, 292, 292)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(joinBookingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(72, 72, 72)
                                .addComponent(exitBookingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 735, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(112, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(joinBookingButton)
                    .addComponent(exitBookingButton))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void joinBookingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinBookingButtonActionPerformed
        int rowSelected = tableBooking1.getSelectedRowCount(); 
        if (rowSelected == 1) { 
            int indexRow = tableBooking1.getSelectedRow(); 
            int idBooking = (int)tableBooking1.getModel().getValueAt(indexRow, tableBooking1.getColumn("ID").getModelIndex());
            String hosted = (String)tableBooking1.getModel().getValueAt(indexRow, tableBooking1.getColumn("Hosted").getModelIndex());
            if(hosted.equals("NO")){
                

                int choice = JOptionPane.showConfirmDialog(this, "Are you sure join Booking?", "Confirmation", JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.YES_OPTION) {
                    
                    String sql = "SELECT * FROM booking WHERE id = ? AND current_slot < max_slot";
                    Object[] parametersSQL = {idBooking};     
                    ArrayList<Map<String, Object>> result = ConnectionDB.getQuery(sql, parametersSQL);
                    
                    if(result.size() > 0){
                        String sql2 = "INSERT INTO account_booking (account_fk, booking_fk) values (? , ?)";
                        Object[] parametersSQL2 = {idAccount, idBooking};
                        if(ConnectionDB.insertQueryParameters(sql2, parametersSQL2) == 1){
                            String sql3 = "UPDATE booking set current_slot = current_slot + 1 WHERE id = ?";
                            Object[] parametersSQL3 = {idBooking};
                            if(ConnectionDB.insertQueryParameters(sql3, parametersSQL3) == 1){
                               JOptionPane.showMessageDialog(this, "Joined!"); 
                               loadBooking();
                               loadBookingUser();
                            }else{
                              JOptionPane.showMessageDialog(this, "Error Database");  
                            }
                        }else{
                            JOptionPane.showMessageDialog(this, "Error Database");
                        } 
                    }else{
                        JOptionPane.showMessageDialog(this, "The booking is full");
                    }
                }
            }else{
                JOptionPane.showMessageDialog(this, "Already Hosted");
            }
        } else { 
             JOptionPane.showMessageDialog(this, "Click on 1 row");
        }
    }//GEN-LAST:event_joinBookingButtonActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        if(rol.equals(Role.STUDENT.getName())){
            StudentFrame studentFrame = new StudentFrame(idAccount);
            studentFrame.setVisible(true);
            dispose();
        }else if(rol.equals(Role.TEACHER.getName())){
            TeacherFrame teacherFrame = new TeacherFrame(idAccount);
            teacherFrame.setVisible(true);
            dispose();
        }

    }//GEN-LAST:event_jLabel2MouseClicked

    private void exitBookingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBookingButtonActionPerformed
        int rowSelected = tableBooking1.getSelectedRowCount(); 
        if (rowSelected == 1) { 
            int indexRow = tableBooking1.getSelectedRow(); 
            int idBooking = (int)tableBooking1.getModel().getValueAt(indexRow, tableBooking1.getColumn("ID").getModelIndex());
            String hosted = (String)tableBooking1.getModel().getValueAt(indexRow, tableBooking1.getColumn("Hosted").getModelIndex());
            if(hosted.equals("YES")){
                int choice = JOptionPane.showConfirmDialog(this, "Are you sure you want to leave Booking?", "Confirmation", JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.YES_OPTION) {
                    String sql = "DELETE FROM account_booking WHERE account_fk = ? AND booking_fk = ?";
                    Object[] parametersSQL = {idAccount, idBooking};
                    if(ConnectionDB.UpdateDeleteQueryParameters(sql, parametersSQL) == 1){
                        String sql2 = "UPDATE booking set current_slot = current_slot - 1 WHERE id = ?";
                        Object[] parametersSQL2 = {idBooking};
                        if(ConnectionDB.insertQueryParameters(sql2, parametersSQL2) == 1){
                           JOptionPane.showMessageDialog(this, "Leave!"); 
                           loadBooking();
                           loadBookingUser();
                        }else{
                          JOptionPane.showMessageDialog(this, "Error Database");  
                        }
                    }else{
                        JOptionPane.showMessageDialog(this, "Error Database");
                    } 
                    
                }
            }else{
                JOptionPane.showMessageDialog(this, "Cant leave beacuse its not Hosted");
            }
        } else { 
             JOptionPane.showMessageDialog(this, "Click on 1 row");
        }
    }//GEN-LAST:event_exitBookingButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccessBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccessBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccessBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccessBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccessBooking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitBookingButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton joinBookingButton;
    private javax.swing.JTable tableBooking;
    private javax.swing.JTable tableBooking1;
    // End of variables declaration//GEN-END:variables
    
     private void loadBooking(){
        bookingMap = new HashMap<>();
        DefaultTableModel tableModel = new DefaultTableModel();
        
        
        tableModel.addColumn("ID");
        tableModel.addColumn("Name");
        tableModel.addColumn("Current Slot");
        tableModel.addColumn("Max Slot");
        tableModel.addColumn("Hosted");
        
        try {
            String sql = "SELECT * FROM booking";     
            ArrayList<Map<String, Object>> result = ConnectionDB.getQuery(sql);
            for (Map<String, Object> map : result) {
                tableModel.addRow(new Object[]{map.get("id"), map.get("name"), map.get("current_slot"), map.get("max_slot"), "NO"});
                bookingMap.put(map.get("name"), map.get("id"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error connection to Database");
        }
        
        tableBooking1.setModel(tableModel);
        tableBooking1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
    }

    private void loadBookingUser() {
        try {
            String sql = "SELECT * FROM account_booking WHERE account_fk = ?"; 
            Object[] parametersSQL = {idAccount};
            ArrayList<Map<String, Object>> result = ConnectionDB.getQuery(sql, parametersSQL);
            for (Map<String, Object> map : result) {
                for(int i = 0 ; i<  tableBooking1.getModel().getRowCount() ; i++){
                    if(tableBooking1.getModel().getValueAt(i, 0).equals((Integer)map.get("booking_fk"))){
                        tableBooking1.getModel().setValueAt("YES", i, tableBooking1.getColumn("Hosted").getModelIndex());
                    }
                }  
            }  
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error connection to Database");
        } 
    }

}

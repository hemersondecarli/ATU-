/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package atu.MenuFrames;

import atu.Class.ConnectionDB;
import atu.OptionFrame;
import atu.TeacherFrames.TeacherFrame;
import atu.TimeTableDialog.AddTimeTable;
import atu.TimeTableDialog.EditTimeTable;
import java.awt.event.ItemEvent;
import java.sql.Time;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alber
 */
public class TimeTable extends javax.swing.JFrame {

    private Map<String, Integer> coursesMap; //Key: "Course" Value: "ID"
    private Map<String, Integer> modulesMap; //Key: "Module" Value: "ID"
    private Map<String, Integer> coursesModulesMap; //Key: "coursesModules" Value: "ID"
    private Map<String, Map<String, Map<String, List<String>>>> courseModuleSheduleMap; //Key "Course" Values: "Key: 'Module', Value: "Key: 'DayWeek', Value: "Datas"
    private Integer idAccount;
    
    public TimeTable() {
        initComponents();
        loadShedule();
        loadComponents();
    }

    public TimeTable(int idAccount) {
        initComponents();
        loadShedule();
        loadComponents();
        this.idAccount = idAccount;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        courseSelect = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        moduleSelect = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTimeTable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("TimeTable");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Back");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Modules:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Courses:");

        tableTimeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableTimeTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane1.setViewportView(tableTimeTable);

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton2.setText("Add Time");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton3.setText("Remove Time");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton4.setText("Edit Time");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(188, 188, 188))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(348, 348, 348))))
            .addGroup(layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(courseSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(moduleSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(124, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(55, 55, 55))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(courseSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moduleSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(22, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        if(idAccount != null){
            TeacherFrame teacherFrame = new TeacherFrame(idAccount);
            teacherFrame.setVisible(true);
            dispose();
        }else{
            OptionFrame OptionFramePage = new OptionFrame();
            OptionFramePage.setVisible(true);
            dispose();  
        }
        
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        if(courseSelect.getSelectedItem() != null && moduleSelect.getSelectedItem() != null){
            String course = (String)courseSelect.getSelectedItem();
            String module = (String)moduleSelect.getSelectedItem();
            
            int idCourseModule = coursesModulesMap.get(course + "-" + module);
            
            AddTimeTable addTimeTable = new AddTimeTable(this,true,idCourseModule);
            addTimeTable.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(this, "Course and Module are required");
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int rowSelected = tableTimeTable.getSelectedRowCount(); 
        if (rowSelected == 1) { 
            int indexRow = tableTimeTable.getSelectedRow();
            String idTimeTable = (String)tableTimeTable.getModel().getValueAt(indexRow, 0);
            if(idTimeTable.equals("--")){
               JOptionPane.showMessageDialog(this, "Time not exist"); 
            }else{
                int timetableID = Integer.parseInt(idTimeTable);
                String sql = "DELETE FROM timetable WHERE id = ?";
                Object[] parametersSQL = {timetableID};
                int choice = JOptionPane.showConfirmDialog(this, "Are you sure delete time?", "Confirmation", JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.YES_OPTION) {
                    if(ConnectionDB.UpdateDeleteQueryParameters(sql, parametersSQL) == 1){
                        JOptionPane.showMessageDialog(this, "ALL OK");
                        loadShedule();
                        loadComponents();
                    }else{
                        JOptionPane.showMessageDialog(this, "Error Database");
                    }
                } 
            }
        } else { 
             JOptionPane.showMessageDialog(this, "Click 1 row");
        } 
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int rowSelected = tableTimeTable.getSelectedRowCount(); 
        if (rowSelected == 1) { 
            int indexRow = tableTimeTable.getSelectedRow();
            String idTimeTable = (String)tableTimeTable.getModel().getValueAt(indexRow, 0);
            if(idTimeTable.equals("--")){
               JOptionPane.showMessageDialog(this, "Time not exist"); 
            }else{
                int timetableID = Integer.parseInt(idTimeTable);
                EditTimeTable editTimeTable = new EditTimeTable(this,true,timetableID);
                editTimeTable.setVisible(true);
            }
        } else { 
             JOptionPane.showMessageDialog(this, "Click 1 row");
        } 
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TimeTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TimeTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TimeTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TimeTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TimeTable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> courseSelect;
    private javax.swing.JButton editAccountButton;
    private javax.swing.JButton editAccountButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> moduleSelect;
    private javax.swing.JTable tableTimeTable;
    // End of variables declaration//GEN-END:variables

    public void loadShedule() {
        coursesMap = new HashMap<>();
        modulesMap = new HashMap<>();
        coursesModulesMap = new HashMap<>();
        courseModuleSheduleMap = new HashMap<>();
        try {
            String sql;
            ArrayList<Map<String, Object>> result;
            if(idAccount != null){
               sql =   "SELECT cm.id as id_courseModule, c.name as course_name, c.id as course_id, m.name as module_name, m.id as module_id, tt.id as tt_id , tt.day_of_week, tt.start_hour, tt.end_hour  FROM course_module cm JOIN "+
                        "module m ON m.id = cm.module_fk JOIN "+
                        "account_module am ON am.module_fk = m.id JOIN "+
                        "course c ON c.id = cm.course_fk LEFT JOIN "+
                        "timetable tt ON tt.course_module_fk = cm.id "+
                        "WHERE am.account_fk = ? "+
                        "ORDER BY FIELD(day_of_week, 'Monday', 'Tuesday', 'Wednesday','Thursday','Friday'), start_hour"; 
                result = ConnectionDB.getQuery(sql, new Object[]{idAccount});
            }else{
                sql =   "SELECT cm.id as id_courseModule, c.name as course_name, c.id as course_id, m.name as module_name, m.id as module_id, tt.id as tt_id , tt.day_of_week, tt.start_hour, tt.end_hour  FROM course_module cm JOIN "+
                        "module m ON m.id = cm.module_fk JOIN "+
                        "course c ON c.id = cm.course_fk LEFT JOIN "+
                        "timetable tt ON tt.course_module_fk = cm.id "+
                        "ORDER BY FIELD(day_of_week, 'Monday', 'Tuesday', 'Wednesday','Thursday','Friday'), start_hour"; 
                
                result = ConnectionDB.getQuery(sql);
            }  
            
            for (Map<String, Object> map : result) {
                
                String course = (String)map.get("course_name");
                Integer course_id = (Integer)map.get("course_id");
                String module = (String)map.get("module_name");
                Integer module_id = (Integer)map.get("module_id");
                
                //Chequear si es nulo timetable
                String dayWeek = map.get("day_of_week") != null ? (String)map.get("day_of_week") : "--";
                String timetable_id = map.get("tt_id") != null ?  Integer.toString((Integer)map.get("tt_id")) : "--";
                String timetable_StartHour = map.get("start_hour") != null ? ((Time)map.get("start_hour")).toString() : "--";
                String timetable_EndHour = map.get("end_hour") != null ? ((Time)map.get("end_hour")).toString() : "--";
                String timetable = timetable_id + ";" + timetable_StartHour + ";" + timetable_EndHour;
                boolean existCourse = coursesMap.containsKey(course);
                boolean existModule = modulesMap.containsKey(module);
                
                if(!existCourse){             
                    coursesMap.put(course, course_id);
                }
                
                if(!courseModuleSheduleMap.containsKey(course)){
                    Map<String, Map<String,List<String>>> moduleMap = new HashMap<>();
                    courseModuleSheduleMap.put(course, moduleMap);
                }
                
                if(!existModule){             
                    modulesMap.put(module, module_id);
                }
                
                if(!courseModuleSheduleMap.get(course).containsKey(module)){
                   Map<String, List<String>> weekMap = new LinkedHashMap<>();
                   courseModuleSheduleMap.get(course).put(module, weekMap); 
                }
                
                Map<String, List<String>> weekMap = courseModuleSheduleMap.get(course).get(module);
                if(!dayWeek.equals("--")){
                    if(weekMap.containsKey(dayWeek)){
                        weekMap.get(dayWeek).add(timetable);
                    }else{
                        List<String> timetableString = new ArrayList<>();
                        timetableString.add(timetable);
                        courseModuleSheduleMap.get(course).get(module).put(dayWeek, timetableString);
                    } 
                }
                
                
                String coursesModules = course + "-" + module;
                int courseModule_id = (Integer)map.get("id_courseModule");
                if(!coursesModulesMap.containsKey(coursesModules)){
                    coursesModulesMap.put(coursesModules, courseModule_id);
                }
                
                
                
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error connection to Database");
        }
    }

    public void loadComponents() {
        
        Map<String, Map<String, Map<String,List<String>>>> courseMap = courseModuleSheduleMap;
        loadCourseSelect(courseMap);
           
        Map<String, Map<String, List<String>>> moduleMap = courseModuleSheduleMap.get((String)courseSelect.getSelectedItem());
        loadModuleSelect(moduleMap);
        
        Map<String, List<String>> listWeek = courseModuleSheduleMap.get((String)courseSelect.getSelectedItem()).get((String)moduleSelect.getSelectedItem());
        loadTimeTable(listWeek);


        //ActionListener courseSelect
        courseSelect.addItemListener((ItemEvent ae) -> {
            if (ae.getStateChange() == ItemEvent.SELECTED) { 
                Map<String, Map<String, List<String>>> mapModule = courseModuleSheduleMap.get((String)courseSelect.getSelectedItem());
                loadModuleSelect(mapModule);
            }
        });
        
        //ActionListener moduleSelect
        moduleSelect.addItemListener((ItemEvent ae) -> {
            if (ae.getStateChange() == ItemEvent.SELECTED) { 
                Map<String, List<String>> mapWeekOfDay = courseModuleSheduleMap.get((String)courseSelect.getSelectedItem()).get((String)moduleSelect.getSelectedItem());
                loadTimeTable(mapWeekOfDay);
            }
        });
    }
    private void loadTimeTable(Map<String, List<String>> weeks) {
        DefaultTableModel tableModel = new DefaultTableModel();
        
        tableModel.addColumn("ID");
        tableModel.addColumn("Day");
        tableModel.addColumn("Start");
        tableModel.addColumn("End");
        
        for (Map.Entry<String, List<String>> entry : weeks.entrySet()) {
            String key = entry.getKey();
            
            for (String times : weeks.get(key)) {
                String[] splitTimes = times.split(";");
                tableModel.addRow(new Object[]{splitTimes[0], key, splitTimes[1], splitTimes[2]});
            }
            
        }
        tableTimeTable.setModel(tableModel);
        tableTimeTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }
    
     private void loadCourseSelect(Map<String, Map<String, Map<String, List<String>>>> courseMap) {
        courseSelect.removeAllItems();
        for (Map.Entry<String, Map<String, Map<String, List<String>>>> entry : courseMap.entrySet()) {
            courseSelect.addItem(entry.getKey());
        }
    }
     
    private void loadModuleSelect(Map<String, Map<String, List<String>>> moduleMap) {
       moduleSelect.removeAllItems();
       for (Map.Entry<String, Map<String, List<String>>> entry : moduleMap.entrySet()) {
            moduleSelect.addItem(entry.getKey()); 
       }
       moduleSelect.setSelectedIndex(0); //Select for the default 0;
    }
    
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package atu.ExamFrameOptions;

import atu.Class.ConnectionDB;
import atu.MenuFrames.Exam;
import atu.gradeDialog.AddReport;
import atu.gradeDialog.ModifyReport;
import atu.gradeDialog.ModifyResult;
import java.awt.event.ItemEvent;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alber
 */
public class GradeExam extends javax.swing.JFrame {

    int idAccount;
    String rol;
    private Map<String, Integer> coursesMap; //Key: "Course" Value: "ID"
    private Map<String, Integer> modulesMap; //Key: "Module" Value: "ID"
    private Map<String, Integer> StudentMap; //Key: "Student" Value: "ID"
    private Map<String, Integer> examMap; //Key: "Exam" Value: "ID"
    private Map<String, Map<String, Map<String, List<String>>>> courseModuleStudentExamMap; //Key: Course, Values: => Key: Module, Value: => Key: Student, Value: ListExams

    public GradeExam() {
        initComponents();

    }

    public GradeExam(String rol, int idAccount) {
        initComponents();
        this.rol = rol;
        this.idAccount = idAccount;
        loadCoursesModulesExam();
        loadComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        courseSelect = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        moduleSelect = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        studentSelect = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableExam = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        modifyResultButton = new javax.swing.JButton();
        addReportButton = new javax.swing.JButton();
        editReportButton = new javax.swing.JButton();
        removeReportButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setText("EXAMS");
        jLabel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 350, 150, 55));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("Back");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 20, 39, 40));

        getContentPane().add(courseSelect, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 180, 490, 30));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Courses:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, 70, 32));

        getContentPane().add(moduleSelect, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 240, 490, 30));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Modules:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 230, 80, 32));

        getContentPane().add(studentSelect, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 300, 490, 30));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Student:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 300, 70, 32));

        tableExam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableExam.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane1.setViewportView(tableExam);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 420, 600, 280));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel4.setText("GRADE EXAMS");
        jLabel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 100, 280, 55));

        modifyResultButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        modifyResultButton.setText("Modify Result");
        modifyResultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyResultButtonActionPerformed(evt);
            }
        });
        getContentPane().add(modifyResultButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 460, -1, -1));

        addReportButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        addReportButton.setText("Add Report");
        addReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addReportButtonActionPerformed(evt);
            }
        });
        getContentPane().add(addReportButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 510, -1, -1));

        editReportButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        editReportButton.setText("Edit Report");
        editReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editReportButtonActionPerformed(evt);
            }
        });
        getContentPane().add(editReportButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 560, -1, -1));

        removeReportButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        removeReportButton.setText("Remove Report");
        removeReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeReportButtonActionPerformed(evt);
            }
        });
        getContentPane().add(removeReportButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 610, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        Exam exam = new Exam(rol, idAccount);
        exam.setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel3MouseClicked

    private void modifyResultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyResultButtonActionPerformed
        int rowSelected = tableExam.getSelectedRowCount();
        if (rowSelected == 1) {
            int indexRow = tableExam.getSelectedRow();
            int idExam = (int) tableExam.getModel().getValueAt(indexRow, 0);
            double resultExam = !((String) tableExam.getModel().getValueAt(indexRow, 3)).equals("--") ? Double.parseDouble((String) tableExam.getModel().getValueAt(indexRow, 3)) : 0;
            /*Map<String, List<String>> get = courseModuleStudentExamMap.get((String)courseSelect.getSelectedItem())
                    .get((String)moduleSelect.getSelectedItem());*/
            //get.entrySet().stream().findFirst().get().getKey()
            int idStudent = StudentMap.get((String) studentSelect.getSelectedItem());

            ModifyResult modifyResult = new ModifyResult(this, true, idExam, resultExam, idStudent);
            modifyResult.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Click on 1 row");
        }
    }//GEN-LAST:event_modifyResultButtonActionPerformed

    private void addReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addReportButtonActionPerformed
        int rowSelected = tableExam.getSelectedRowCount();
        if (rowSelected == 1) {
            int indexRow = tableExam.getSelectedRow();
            int idExam = (int) tableExam.getModel().getValueAt(indexRow, 0);
            String statusReport = (String) tableExam.getModel().getValueAt(indexRow, 4);
             /*Map<String, List<String>> get = courseModuleStudentExamMap.get((String) courseSelect.getSelectedItem())
                    .get((String) moduleSelect.getSelectedItem());*/

            //int idStudent = StudentMap.get(get.entrySet().stream().findFirst().get().getKey());
            int idStudent = StudentMap.get((String) studentSelect.getSelectedItem());

            if (statusReport.equals("YES")) {
                JOptionPane.showMessageDialog(this, "Report already exist");
            } else {
                AddReport addReport = new AddReport(this, true, idExam, idStudent);
                addReport.setVisible(true);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Click on 1 row");
        }
    }//GEN-LAST:event_addReportButtonActionPerformed

    private void editReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editReportButtonActionPerformed
        int rowSelected = tableExam.getSelectedRowCount();
        if (rowSelected == 1) {
            int indexRow = tableExam.getSelectedRow();
            int idExam = (int) tableExam.getModel().getValueAt(indexRow, 0);
            String statusReport = (String) tableExam.getModel().getValueAt(indexRow, 4);
            /*Map<String, List<String>> get = courseModuleStudentExamMap.get((String) courseSelect.getSelectedItem())
                    .get((String) moduleSelect.getSelectedItem());

            int idStudent = StudentMap.get(get.entrySet().stream().findFirst().get().getKey());*/
            
            int idStudent = StudentMap.get((String) studentSelect.getSelectedItem());

            if (statusReport.equals("NO")) {
                JOptionPane.showMessageDialog(this, "Report does not exist");
            } else {
                ModifyReport modifyReport = new ModifyReport(this, true, idExam, idStudent);
                modifyReport.setVisible(true);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Click on 1 row");
        }
    }//GEN-LAST:event_editReportButtonActionPerformed

    private void removeReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeReportButtonActionPerformed
        int rowSelected = tableExam.getSelectedRowCount();
        if (rowSelected == 1) {
            int indexRow = tableExam.getSelectedRow();
            int idExam = (int) tableExam.getModel().getValueAt(indexRow, 0);
            String statusReport = (String) tableExam.getModel().getValueAt(indexRow, 4);
            /*Map<String, List<String>> get = courseModuleStudentExamMap.get((String) courseSelect.getSelectedItem())
                    .get((String) moduleSelect.getSelectedItem());

            int idStudent = StudentMap.get(get.entrySet().stream().findFirst().get().getKey());*/
            
            int idStudent = StudentMap.get((String) studentSelect.getSelectedItem());

            if (statusReport.equals("NO")) {
                JOptionPane.showMessageDialog(this, "Report does not exist");
            } else {
                int choice = JOptionPane.showConfirmDialog(this, "Are you sure you want to remove the report associated to the exam?", "Confirmation", JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.YES_OPTION) {

                    String sql = "DELETE FROM report WHERE id = (SELECT report_fk FROM grade WHERE account_fk = ? AND exam_fk = ?)";
                    if (ConnectionDB.UpdateDeleteQueryParameters(sql, new Object[]{idStudent, idExam}) == 1) {
                        JOptionPane.showMessageDialog(this, "Removed Successfully");
                        loadCoursesModulesExam();
                        loadComponents();
                    } else {
                        JOptionPane.showMessageDialog(this, "Fail to Remove Report");
                    }
                }
            }

        } else {
            JOptionPane.showMessageDialog(this, "Click on 1 row");
        }
    }//GEN-LAST:event_removeReportButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GradeExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GradeExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GradeExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GradeExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GradeExam().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addReportButton;
    private javax.swing.JComboBox<String> courseSelect;
    private javax.swing.JButton editReportButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modifyResultButton;
    private javax.swing.JComboBox<String> moduleSelect;
    private javax.swing.JButton removeReportButton;
    private javax.swing.JComboBox<String> studentSelect;
    private javax.swing.JTable tableExam;
    // End of variables declaration//GEN-END:variables

    public void loadCoursesModulesExam() {
        coursesMap = new HashMap<>();
        modulesMap = new HashMap<>();
        StudentMap = new HashMap<>();
        examMap = new HashMap<>();
        courseModuleStudentExamMap = new HashMap<>();
        try {
            String sql = "SELECT c.name AS course_name, c.id AS course_id, m.name AS module_name, m.id AS module_id, e.name AS exam_name, e.id AS exam_id, e.exam_date, a2.name AS account_name, a2.surname AS account_surname, a2.ppsn AS account_ppsn, a2.id AS account_id, r.id AS report, g.result AS result FROM ( SELECT DISTINCT e.id AS exam_id, a.id AS account_id FROM exam e JOIN course_module cm ON e.course_module_fk = cm.id CROSS JOIN account a ) AS unique_exams_accounts JOIN exam e ON unique_exams_accounts.exam_id = e.id JOIN course_module cm ON e.course_module_fk = cm.id JOIN module m ON cm.module_fk = m.id JOIN course c ON cm.course_fk = c.id LEFT JOIN grade g ON e.id = g.exam_fk AND unique_exams_accounts.account_id = g.account_fk LEFT JOIN account a2 ON unique_exams_accounts.account_id = a2.id LEFT JOIN report r ON r.id = g.report_fk JOIN role r2 ON r2.id = a2.role_fk WHERE r2.name = 'Student';";

            //Object[] parametersSQL = {idAccount};
            //ArrayList<Map<String, Object>> result = ConnectionDB.getQuery(sql, parametersSQL);
            ArrayList<Map<String, Object>> result = ConnectionDB.getQuery(sql);
            for (Map<String, Object> map : result) {
                Integer account_id = (Integer) map.get("account_id");
                if (account_id != idAccount) {

                    Object report = map.get("report");

                    String course = (String) map.get("course_name");
                    Integer course_id = (Integer) map.get("course_id");
                    String module = (String) map.get("module_name");
                    Integer module_id = (Integer) map.get("module_id");

                    String account_name = (String) map.get("account_name");
                    String account_surname = (String) map.get("account_surname");
                    String account_ppsn = (String) map.get("account_ppsn");
                    String student = account_name + " " + account_surname + " - " + account_ppsn;

                    String exam_name = (String) map.get("exam_name");
                    Integer exam_id = (Integer) map.get("exam_id");
                    String exam_date = ((Timestamp) map.get("exam_date")).toString();
                    Object exam_result = map.get("result");

                    String exam = exam_id + ";" + exam_name + ";" + exam_date + ";" + (exam_result != null ? exam_result : "--") + ";" + (report != null ? "YES" : "NO");

                    boolean existCourse = coursesMap.containsKey(course);
                    boolean existModule = modulesMap.containsKey(module);
                    boolean existStudent = StudentMap.containsKey(student);
                    boolean existExam = modulesMap.containsKey(exam);

                    if (!existCourse) {
                        coursesMap.put(course, course_id);
                        Map<String, Map<String, List<String>>> moduleMap = new HashMap<>();
                        courseModuleStudentExamMap.put(course, moduleMap);
                    }

                    if (!existModule) {
                        modulesMap.put(module, module_id);
                        Map<String, List<String>> StudentMap = new HashMap<>();
                        courseModuleStudentExamMap.get(course).put(module, StudentMap);
                    }

                    if (!existStudent) {
                        StudentMap.put(student, account_id);
                    }

                    if (!courseModuleStudentExamMap.get(course).get(module).containsKey(student)) {
                        List<String> examList = new ArrayList();
                        courseModuleStudentExamMap.get(course).get(module).put(student, examList);
                    }

                    if (!existExam) {
                        examMap.put(exam, exam_id);
                    }

                    if (!courseModuleStudentExamMap.get(course).get(module).get(student).contains(exam)) {
                        courseModuleStudentExamMap.get(course).get(module).get(student).add(exam);
                    }
                }

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error connection to Database");
        }
    }

    public void loadComponents() {

        Map<String, Map<String, Map<String, List<String>>>> courseMap = courseModuleStudentExamMap;
        loadCourseSelect(courseMap);

        Map<String, Map<String, List<String>>> moduleMap = courseModuleStudentExamMap.get((String) courseSelect.getSelectedItem());
        loadModuleSelect(moduleMap);

        Map<String, List<String>> studentMap = courseModuleStudentExamMap.get((String) courseSelect.getSelectedItem()).get((String) moduleSelect.getSelectedItem());
        loadStudentSelect(studentMap);

        List<String> listExam = courseModuleStudentExamMap.get((String) courseSelect.getSelectedItem()).get((String) moduleSelect.getSelectedItem()).get((String) studentSelect.getSelectedItem());
        loadTableExam(listExam);

        //ActionListener courseSelect
        courseSelect.addItemListener((ItemEvent ae) -> {
            if (ae.getStateChange() == ItemEvent.SELECTED) {
                Map<String, Map<String, List<String>>> mapModule = courseModuleStudentExamMap.get((String) courseSelect.getSelectedItem());
                loadModuleSelect(mapModule);
            }
        });

        //ActionListener moduleSelect
        moduleSelect.addItemListener((ItemEvent ae) -> {
            if (ae.getStateChange() == ItemEvent.SELECTED) {
                Map<String, List<String>> mapStudent = courseModuleStudentExamMap.get((String) courseSelect.getSelectedItem()).get((String) moduleSelect.getSelectedItem());
                loadStudentSelect(mapStudent);
            }
        });

        //ActionListener moduleSelect
        studentSelect.addItemListener((ItemEvent ae) -> {
            if (ae.getStateChange() == ItemEvent.SELECTED) {
                List<String> listExam1 = courseModuleStudentExamMap.get((String) courseSelect.getSelectedItem()).get((String) moduleSelect.getSelectedItem()).get((String) studentSelect.getSelectedItem());
                loadTableExam(listExam1);
            }
        });

    }

    private void loadTableExam(List<String> exams) {
        DefaultTableModel tableModel = new DefaultTableModel();

        tableModel.addColumn("ID");
        tableModel.addColumn("Name");
        tableModel.addColumn("Date");
        tableModel.addColumn("Result");
        tableModel.addColumn("Report");

        for (String exam : exams) {
            String[] splitExam = exam.split(";");
            tableModel.addRow(new Object[]{Integer.parseInt(splitExam[0]), splitExam[1], splitExam[2], splitExam[3], splitExam[4]});
        }

        tableExam.setModel(tableModel);
        tableExam.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    private void loadCourseSelect(Map<String, Map<String, Map<String, List<String>>>> courseMap) {
        courseSelect.removeAllItems();
        for (Map.Entry<String, Map<String, Map<String, List<String>>>> entry : courseMap.entrySet()) {
            courseSelect.addItem(entry.getKey());
        }
    }

    private void loadModuleSelect(Map<String, Map<String, List<String>>> moduleMap) {
        moduleSelect.removeAllItems();
        for (Map.Entry<String, Map<String, List<String>>> entry : moduleMap.entrySet()) {
            moduleSelect.addItem(entry.getKey());
        }
        moduleSelect.setSelectedIndex(0); //Select for the default 0;
    }

    private void loadStudentSelect(Map<String, List<String>> studentMap) {
        studentSelect.removeAllItems();
        for (Map.Entry<String, List<String>> entry : studentMap.entrySet()) {
            studentSelect.addItem(entry.getKey());
        }
        studentSelect.setSelectedIndex(0); //Select for the default 0;
    }
}

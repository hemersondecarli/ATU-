/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package atu.ExamFrameOptions;

import atu.Class.ConnectionDB;
import atu.MenuFrames.Exam;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alber
 */
public class EditDeleteExam extends javax.swing.JFrame {

    
    int idAccount;
    String rol;
    private Map<String, Integer> coursesMap; //Key: "Course" Value: "ID"
    private Map<String, Integer> modulesMap; //Key: "Module" Value: "ID"
    private Map<String, Integer> examMap; //Key: "Exam" Value: "ID"
    private Map<String, Map<String, List<String>>> courseModuleExamMap; //Key "Course" Values: "Key: 'Module', Value: 'ListExam'"
    
    /**
     * Creates new form DeleteStudent
     */
    public EditDeleteExam() {
        initComponents();
    }

    public EditDeleteExam(String rol, int idAccount) {
        initComponents();
        this.rol = rol;
        this.idAccount = idAccount;
        loadCoursesModulesExam();
        loadComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableExam = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        editAccountButton = new javax.swing.JButton();
        deleteAccount = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        courseSelect = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        moduleSelect = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableExam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableExam.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane1.setViewportView(tableExam);

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 36)); // NOI18N
        jLabel1.setText("EXAM");

        editAccountButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        editAccountButton.setText("EDIT");
        editAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAccountButtonActionPerformed(evt);
            }
        });

        deleteAccount.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        deleteAccount.setText("DELETE");
        deleteAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAccountActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("Back");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Modules:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Courses:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(58, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(editAccountButton)
                        .addGap(77, 77, 77)
                        .addComponent(deleteAccount)
                        .addGap(246, 246, 246))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(30, 30, 30)
                                    .addComponent(courseSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(20, 20, 20)
                                    .addComponent(moduleSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(172, 172, 172)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(71, 71, 71))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(courseSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moduleSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editAccountButton)
                    .addComponent(deleteAccount))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAccountButtonActionPerformed
    int rowSelected = tableExam.getSelectedRowCount(); 
       if (rowSelected == 1) { 
           int indexRow = tableExam.getSelectedRow(); 
           int idExam = (int)tableExam.getModel().getValueAt(indexRow, 0);
           EditExam editExamPage = new EditExam(rol, idAccount, idExam);
           editExamPage.setVisible(true);
           dispose();
       } else { 
            JOptionPane.showMessageDialog(this, "Click 1 row");
       }
    }//GEN-LAST:event_editAccountButtonActionPerformed

    private void deleteAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAccountActionPerformed
        int rowSelected = tableExam.getSelectedRowCount(); 
        if (rowSelected == 1) { 
            int indexRow = tableExam.getSelectedRow(); 
            int idExam = (int)tableExam.getModel().getValueAt(indexRow, 0);
            String sql = "DELETE FROM Exam WHERE id = ?";
            Object[] parametersSQL = {idExam};

            int choice = JOptionPane.showConfirmDialog(this, "Are you sure delete Exam and all reference?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (choice == JOptionPane.YES_OPTION) {
               if(ConnectionDB.UpdateDeleteQueryParameters(sql, parametersSQL) == 1){
                   JOptionPane.showMessageDialog(this, "ALL OK");
                   loadCoursesModulesExam();
                   loadComponents();
               }else{
                   JOptionPane.showMessageDialog(this, "Error Database");
               }
            }
        } else { 
             JOptionPane.showMessageDialog(this, "Click 1 row");
        } 
    }//GEN-LAST:event_deleteAccountActionPerformed

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        Exam exam = new Exam(rol, idAccount);
        exam.setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel3MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditDeleteExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditDeleteExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditDeleteExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditDeleteExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditDeleteExam().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> courseSelect;
    private javax.swing.JButton deleteAccount;
    private javax.swing.JButton editAccountButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> moduleSelect;
    private javax.swing.JTable tableExam;
    // End of variables declaration//GEN-END:variables
   
    private void loadCoursesModulesExam() {
        coursesMap = new HashMap<>();
        modulesMap = new HashMap<>();
        examMap = new HashMap<>();
        courseModuleExamMap = new HashMap<>();
        try {
            String sql =    "SELECT c.name as course_name, c.id as course_id, m.name as module_name, m.id as module_id, e.name as exam_name, e.id as exam_id, e.exam_date FROM account a JOIN "+
                            "account_module am ON am.account_fk = a.id JOIN "+
                            "module m ON m.id = am.module_fk JOIN "+
                            "course_module cm ON cm.module_fk = m.id JOIN "+
                            "course c ON c.id = cm.course_fk JOIN "+
                            "exam e ON e.course_module_fk = cm.id "+
                            "WHERE a.id = ?";     
            Object[] parametersSQL = {idAccount};
            ArrayList<Map<String, Object>> result = ConnectionDB.getQuery(sql,parametersSQL);
            
            for (Map<String, Object> map : result) {
                String course = (String)map.get("course_name");
                Integer course_id = (Integer)map.get("course_id");
                String module = (String)map.get("module_name");
                Integer module_id = (Integer)map.get("module_id");
                String exam = (String)map.get("exam_name");
                Integer exam_id = (Integer)map.get("exam_id");
                String exam_date = ((LocalDateTime)map.get("exam_date")).toString();
                boolean existCourse = coursesMap.containsKey(course);
                boolean existModule = modulesMap.containsKey(module);
                boolean existExam = modulesMap.containsKey(exam + "-" + exam_date);
                if(!existCourse){             
                    coursesMap.put(course, course_id);
                    Map<String, List<String>> moduleMap = new HashMap<>();
                    courseModuleExamMap.put(course, moduleMap);
                }
                
                if(!existModule){             
                    modulesMap.put(module, module_id);
                    ArrayList listExam = new ArrayList();
                    courseModuleExamMap.get(course).put(module, listExam);
                }
                
                if(!existExam){
                    String wordExam = exam_id + ";" + exam + ";" + exam_date;
                    examMap.put(wordExam, exam_id);
                    courseModuleExamMap.get(course).get(module).add(wordExam);
                } 
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error connection to Database");
        }
    }
    private void loadComponents() {
        
        Map<String, Map<String, List<String>>> courseMap = courseModuleExamMap;
        loadCourseSelect(courseMap);
           
        Map<String, List<String>> moduleMap = courseModuleExamMap.get((String)courseSelect.getSelectedItem());
        loadModuleSelect(moduleMap);
        
        List<String> listExam = courseModuleExamMap.get((String)courseSelect.getSelectedItem()).get((String)moduleSelect.getSelectedItem());
        loadTableExam(listExam);
            

        //ActionListener courseSelect
        courseSelect.addItemListener((ItemEvent ae) -> {
            if (ae.getStateChange() == ItemEvent.SELECTED) { 
                Map<String, List<String>> mapModule = courseModuleExamMap.get((String)courseSelect.getSelectedItem());
                loadModuleSelect(mapModule);
            }
        });
        
        //ActionListener moduleSelect
        moduleSelect.addItemListener((ItemEvent ae) -> {
            if (ae.getStateChange() == ItemEvent.SELECTED) { 
                List<String> listExam1 = courseModuleExamMap.get((String)courseSelect.getSelectedItem()).get((String)moduleSelect.getSelectedItem());
                loadTableExam(listExam1);
            }
        });
    }
    private void loadTableExam(List<String> exams) {
        DefaultTableModel tableModel = new DefaultTableModel();
        
        tableModel.addColumn("ID");
        tableModel.addColumn("Name");
        tableModel.addColumn("Date");
        
        for (String exam : exams) {
            String[] splitExam = exam.split(";");
            tableModel.addRow(new Object[]{Integer.parseInt(splitExam[0]), splitExam[1], splitExam[2]});
        }
         
        tableExam.setModel(tableModel);
        tableExam.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }
    
     private void loadCourseSelect(Map<String, Map<String, List<String>>> courseMap) {
        courseSelect.removeAllItems();
        for (Map.Entry<String, Map<String, List<String>>> entry : courseMap.entrySet()) {
            courseSelect.addItem(entry.getKey());
        }
    }
     
    private void loadModuleSelect(Map<String, List<String>> moduleMap) {
       moduleSelect.removeAllItems();
       for (Map.Entry<String, List<String>> entry : moduleMap.entrySet()) {
            moduleSelect.addItem(entry.getKey()); 
       }
       moduleSelect.setSelectedIndex(0); //Select for the default 0;
    }

   
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package atu.ChatDialog;

import atu.Class.ConnectionDB;
import atu.MenuFrames.Chat;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.JOptionPane;

/**
 *
 * @author alber
 */
public class Chatting extends javax.swing.JDialog {

    int idSender;
    int idReceiver;

    public Chatting(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public Chatting(Chat aThis, boolean b, int idSender, int idReceiver) {
        super(aThis, b);
        initComponents();
        this.idSender = idSender;
        this.idReceiver = idReceiver;
        startMessageLoadingThread(5);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane1 = new java.awt.ScrollPane();
        areaText = new java.awt.TextArea();
        textChat = new javax.swing.JTextField();
        sendMessage = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        areaText.setEditable(false);
        scrollPane1.add(areaText);

        textChat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textChatKeyPressed(evt);
            }
        });

        sendMessage.setText("Send");
        sendMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textChat, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sendMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textChat)
                    .addComponent(sendMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageActionPerformed
        sendMessage();
        
    }//GEN-LAST:event_sendMessageActionPerformed

    private void textChatKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textChatKeyPressed
       if(evt.getKeyCode() == KeyEvent.VK_ENTER){
           sendMessage();
       }
    }//GEN-LAST:event_textChatKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chatting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chatting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chatting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chatting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Chatting dialog = new Chatting(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.TextArea areaText;
    private java.awt.ScrollPane scrollPane1;
    private javax.swing.JButton sendMessage;
    private javax.swing.JTextField textChat;
    // End of variables declaration//GEN-END:variables

    private void loadChat() {
        areaText.setText("");
        try {
            String sql = "SELECT c.message, c.message_date, a.name FROM chat c " +
            "JOIN account a ON a.id = c.account_sender_fk " +
            "WHERE (account_sender_fk = " +idSender+ " AND account_receiver_fk = "+idReceiver+") OR (account_sender_fk = "+idReceiver+" AND account_receiver_fk = "+idSender+") " + 
            "ORDER BY message_date ASC";
        
            ArrayList<Map<String, Object>> result = ConnectionDB.getQuery(sql);
            for (Map<String, Object> map : result) {
                areaText.setText(areaText.getText() + map.get("name")+" : "+map.get("message")+"\n"+map.get("message_date")+"\n");
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error connection to Database");
        }
    }
    
    private void sendMessage(){
        String msg = textChat.getText();
        if(!msg.isEmpty()){
            String sql = "INSERT INTO chat (message, account_sender_fk, account_receiver_fk) VALUES (? , ? , ?);" ;   
            Object[] parametersSQL = {msg, idSender, idReceiver};
            if(ConnectionDB.insertQueryParameters(sql, parametersSQL) == 1){
                areaText.setText("");
                textChat.setText("");
                loadChat();
            } 
        }
    }
    
    private void startMessageLoadingThread(int intervalSeconds) {
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    loadChat();
                    try {
                        Thread.sleep(intervalSeconds * 1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        });
        thread.start();
    }
    
    
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package atu.AccountFrameOptions;

import atu.Class.ConnectionDB;
import atu.Class.Role;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author alber
 */
public class EditAccount extends javax.swing.JFrame {

    private Map<Object, Object> coursesMap;
    private Map<Object, Object> modulesMap;
    private Map<Object, Object> rolesMap;
    private int idAccount;
    
    /**
     * Creates new form EditStudent
     * @param id
     */
    public EditAccount(int id) {
        idAccount = id;
        initComponents();
        loadCourses();
        loadModules();
        loadRoles();
        loadAccount();
    }

    public EditAccount() {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        nameTF = new javax.swing.JTextField();
        phoneTF = new javax.swing.JTextField();
        emailTF = new javax.swing.JTextField();
        ppsnTF = new javax.swing.JTextField();
        addressTF = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        textProgrammeCode = new javax.swing.JLabel();
        roles = new javax.swing.JComboBox<>();
        password = new javax.swing.JPasswordField();
        jLabel15 = new javax.swing.JLabel();
        surnameTF = new javax.swing.JTextField();
        birthdayInput = new com.toedter.calendar.JDateChooser();
        courses = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        module = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        modules = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setText("EDIT ACCOUNT");
        jLabel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 50, -1, 55));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("Back");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 30, 39, 40));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton1.setText("Submit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 690, 130, 60));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Name:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, 32));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Birthday:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 91, 40));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Email:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 91, 40));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("PPSN:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 121, 40));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Address:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 430, 91, 40));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Phone No:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 91, 40));
        getContentPane().add(nameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 130, 490, 30));
        getContentPane().add(phoneTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 250, 490, 30));
        getContentPane().add(emailTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 300, 490, 30));
        getContentPane().add(ppsnTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 390, 490, 30));
        getContentPane().add(addressTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 430, 490, 30));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Password:");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 165, 40));

        textProgrammeCode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        textProgrammeCode.setText("Programme Code:");
        getContentPane().add(textProgrammeCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 530, 165, 40));

        roles.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rolesItemStateChanged(evt);
            }
        });
        getContentPane().add(roles, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 480, 490, 40));
        getContentPane().add(password, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 340, 490, 30));

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setText("Surname:");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 91, 40));
        getContentPane().add(surnameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 170, 490, 30));
        getContentPane().add(birthdayInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 210, 490, 30));
        getContentPane().add(courses, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 530, 490, 40));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Role:");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 480, 91, 40));

        module.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        module.setText("Module:");
        module.setOpaque(true);
        getContentPane().add(module, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 530, 165, 40));

        modules.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        modules.setFocusable(false);
        jScrollPane1.setViewportView(modules);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 530, 490, 130));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        EditDeleteAccount editDeletePage = new EditDeleteAccount();
        editDeletePage.setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         try {
            
            boolean isGood = false;
            if(nameTF.getText().isEmpty() || surnameTF.getText().isEmpty() || birthdayInput.getDate() == null || phoneTF.getText().isEmpty() || emailTF.getText().isEmpty() || 
                    new String(password.getPassword()).isEmpty() || ppsnTF.getText().isEmpty() || addressTF.getText().isEmpty()) {
                
                JOptionPane.showMessageDialog(this, "All Field Required");
            }else{
               
                String sql = "UPDATE account SET name = ?, surname = ?, birthday = ?, phone = ?, email = ?, password = ?, ppsn = ?, address = ?, course_fk = ?, role_fk = ? WHERE id = ?";  
                boolean allOk = true;
                String name = nameTF.getText();
                String surname = surnameTF.getText();
                Date birthday = birthdayInput.getDate();
                int phone = Integer.parseInt(phoneTF.getText());
                String email = emailTF.getText();
                String pass = new String(password.getPassword());
                String ppsn = ppsnTF.getText();
                String address = addressTF.getText(); 
                int role = (int)rolesMap.get(roles.getSelectedItem().toString());
                int course = -1;
                int[] module = new int[modules.getSelectedValuesList().size()];
                if(roles.getSelectedItem().toString().equals(Role.STUDENT.getName())){     
                    if(courses.getSelectedItem() != null){
                        course = (int)coursesMap.get(courses.getSelectedItem().toString());
                        isGood = true;
                    }else{
                        JOptionPane.showMessageDialog(this, "Course is Required!");
                    }  
                }else if(roles.getSelectedItem().toString().equals(Role.TEACHER.getName())){
                    if(modules.getSelectedValuesList().size() != 0){
                        for (int i = 0; i < modules.getSelectedValuesList().size(); i++) {
                            module[i] = (int)modulesMap.get(modules.getSelectedValuesList().get(i));
                        }
                        isGood = true;
                    }else{
                        JOptionPane.showMessageDialog(this, "Module is Required!");
                    }  
                }else if(roles.getSelectedItem().toString().equals(Role.STAFF.getName())) {
                    isGood = true;
                }else{
                    JOptionPane.showMessageDialog(this, "Something was wrong!");
                }
                
                if(isGood){
                    int choice = JOptionPane.showConfirmDialog(this, "Are you sure all details are correctly?", "Confirmation", JOptionPane.YES_NO_OPTION);
                    if (choice == JOptionPane.YES_OPTION) {
                        if(roles.getSelectedItem().toString().equals(Role.STUDENT.getName())){
                            Object[] parametersSQL = {name, surname, birthday, phone, email, pass, ppsn, address, course, role, idAccount};
                            if(ConnectionDB.UpdateDeleteQueryParameters(sql, parametersSQL) == 1){
                                JOptionPane.showMessageDialog(this, "Update Successful");
                            }else{
                                JOptionPane.showMessageDialog(this, "Update Fail");
                            }
                        }else if(roles.getSelectedItem().toString().equals(Role.TEACHER.getName())){
                            Object[] parametersSQL = {name, surname, birthday, phone, email, pass, ppsn, address, null, role, idAccount};
                            if(ConnectionDB.UpdateDeleteQueryParameters(sql, parametersSQL) == 1){
                                String sql2 = "DELETE FROM account_module WHERE account_fk = ?";
                                ConnectionDB.UpdateDeleteQueryParameters(sql2, new Object[]{idAccount});
                                String sql3 = "INSERT INTO account_module (account_fk, module_fk) VALUES(?, ?)";

                                for (int id : module) {
                                    Object[] parametersSQL2 = {idAccount, id};
                                    if(ConnectionDB.insertQueryParameters(sql3, parametersSQL2) != 1){
                                        JOptionPane.showMessageDialog(this, "Fail with Module!");
                                        allOk = false;
                                    }
                                }
                                if(allOk)
                                    JOptionPane.showMessageDialog(this, "Update Successful");  
                                
                            }else{
                                JOptionPane.showMessageDialog(this, "Registration Fail");
                            }
                        }else if(roles.getSelectedItem().toString().equals(Role.STAFF.getName())){
                            Object[] parametersSQL = {name, surname, birthday, phone, email, pass, ppsn, address, null, role, idAccount};
                            if(ConnectionDB.UpdateDeleteQueryParameters(sql, parametersSQL) == 1){
                                JOptionPane.showMessageDialog(this, "Update Successful");
                            }else{
                                JOptionPane.showMessageDialog(this, "Update Fail");
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "error");

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void rolesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rolesItemStateChanged

        if(roles.getSelectedItem().toString().equals(Role.STUDENT.getName())){
            textProgrammeCode.setVisible(true);
            courses.setVisible(true);
            module.setVisible(false);
            modules.setVisible(false);
        }else if(roles.getSelectedItem().toString().equals(Role.TEACHER.getName())){
            module.setVisible(true);
            modules.setVisible(true);
            textProgrammeCode.setVisible(false);
            courses.setVisible(false);
        }else{
            module.setVisible(false);
            modules.setVisible(false);
            textProgrammeCode.setVisible(false);
            courses.setVisible(false);
        }
    }//GEN-LAST:event_rolesItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditAccount().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressTF;
    private com.toedter.calendar.JDateChooser birthdayInput;
    private javax.swing.JComboBox<String> courses;
    private javax.swing.JTextField emailTF;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel module;
    private javax.swing.JList<String> modules;
    private javax.swing.JTextField nameTF;
    private javax.swing.JPasswordField password;
    private javax.swing.JTextField phoneTF;
    private javax.swing.JTextField ppsnTF;
    private javax.swing.JComboBox<String> roles;
    private javax.swing.JTextField surnameTF;
    private javax.swing.JLabel textProgrammeCode;
    // End of variables declaration//GEN-END:variables

    private void loadAccount() {
        try {
            String sql = "SELECT * FROM account WHERE id = ?";  
            Object[] parameters = {idAccount};
            ArrayList<Map<String, Object>> result = ConnectionDB.getQuery(sql, parameters);
            for (Map<String, Object> map : result) {
                nameTF.setText((String)map.get("name"));
                surnameTF.setText((String)map.get("surname"));
                birthdayInput.setDate((Date)map.get("birthday"));
                phoneTF.setText(String.valueOf((Integer)map.get("phone")));
                emailTF.setText((String)map.get("email"));
                password.setText((String)map.get("password"));
                ppsnTF.setText((String)map.get("ppsn"));
                addressTF.setText((String)map.get("address"));
    
                 String role = (String)rolesMap.entrySet().stream()
                .filter(entry -> (Integer)map.get("role_fk") == (Integer)entry.getValue())
                .map(Map.Entry::getKey)
                .findFirst()
                .orElse(null);
  
                roles.setSelectedItem(role);
                
                
                if(role.equals(Role.STUDENT.getName())){
                    String course = (String)coursesMap.entrySet().stream()
                    .filter(entry -> (Integer)map.get("course_fk") == (Integer)entry.getValue())
                    .map(Map.Entry::getKey)
                    .findFirst()
                    .orElse(null);
                    
                    courses.setSelectedItem(course);
                    
                }else if(role.equals(Role.TEACHER.getName())){
                    String sql2 = "SELECT * FROM account_module WHERE account_fk = ?";  
                    Object[] parameters2 = {idAccount};
                    ArrayList<Map<String, Object>> result2 = ConnectionDB.getQuery(sql2, parameters2);
                    
                    
                    ArrayList<Integer> items = new ArrayList <>();
                       
                    
                    for (Map<String, Object> map1 : result2) {
                        String module = (String)modulesMap.entrySet().stream()
                        .filter(entry -> (Integer)map1.get("module_fk") == (Integer)entry.getValue())
                        .map(Map.Entry::getKey)
                        .findFirst()
                        .orElse(null);
                        
                        for(int i = 0 ; i<  modules.getModel().getSize() ; i++){
                            if(modules.getModel().getElementAt(i).equals(module)){
                                items.add(i);
                            }
                        }   
                    }
                    
                    int[] intArray = new int[items.size()];
                    for (int i = 0; i < items.size(); i++) {
                        intArray[i] = items.get(i);
                    }
                    
                    modules.setSelectedIndices(intArray);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error connection to Database");
        }
    }
    
    private void loadCourses() {
        coursesMap = new HashMap<>();
        try {
            String sql = "SELECT * FROM course WHERE id in (SELECT course_fk FROM course_module)";     
            ArrayList<Map<String, Object>> result = ConnectionDB.getQuery(sql);
            for (Map<String, Object> map : result) {
                courses.addItem((String)map.get("name") + " - code: " + map.get("code"));
                coursesMap.put(map.get("name") + " - code: " + map.get("code"), map.get("id"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error connection to Database");
        }
    }

    private void loadModules() {
        modulesMap = new HashMap<>();
        DefaultListModel listModel = new DefaultListModel();
        try {
            String sql = "SELECT * FROM module WHERE id in (SELECT module_fk FROM course_module)";     
            ArrayList<Map<String, Object>> result = ConnectionDB.getQuery(sql);
            for (Map<String, Object> map : result) {
                listModel.addElement((String)map.get("name"));
                modulesMap.put(map.get("name"), map.get("id"));
            }
            modules.setModel(listModel);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error connection to Database");
        }
    }

    private void loadRoles() {
        rolesMap = new HashMap<>();
        try {
            String sql = "SELECT * FROM role";     
            ArrayList<Map<String, Object>> result = ConnectionDB.getQuery(sql);
            for (Map<String, Object> map : result) {
                roles.addItem((String)map.get("name"));
                rolesMap.put(map.get("name"), map.get("id"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error connection to Database");
        }
    }
}

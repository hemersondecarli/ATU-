/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package atu.BookingFrameOptions;

import atu.Class.ConnectionDB;
import atu.MenuFrames.Booking;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.JOptionPane;

/**
 *
 * @author alber
 */
public class EditBooking extends javax.swing.JFrame {

    private int idBooking;
    
    /**
     * Creates new form EditStudent
     * @param id
     */
    public EditBooking(int id) {
        idBooking = id;
        initComponents();
        loadBooking();
    }

    public EditBooking() {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nameBooking = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        module = new javax.swing.JLabel();
        currentSlot = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        slotMax = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setText("EDIT BOOKING");
        jLabel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 90, 290, 55));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Name:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 180, -1, 32));
        getContentPane().add(nameBooking, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 180, 490, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("Back");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 20, 39, 40));

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton2.setText("Submit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 320, 130, 60));

        module.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        module.setText("Max Slot:");
        module.setOpaque(true);
        getContentPane().add(module, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 260, 70, 40));

        currentSlot.setEnabled(false);
        getContentPane().add(currentSlot, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 230, 490, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Current Slots:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, 32));

        slotMax.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        getContentPane().add(slotMax, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 270, 490, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        Booking bookingPage = new Booking();
        bookingPage.setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            String name = nameBooking.getText();
            int slotMaxNum = (int)slotMax.getValue();    
            if(name.isEmpty() && slotMaxNum <= 0) {
                JOptionPane.showMessageDialog(this, "All Field Required");
            }else{
                int choice = JOptionPane.showConfirmDialog(this, "Update Booking?", "Confirmation", JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.YES_OPTION) {
                    String sql = "SELECT * FROM booking WHERE id = ? AND current_slot <= ?";
                    Object[] parametersSQL = {idBooking, slotMaxNum};     
                    ArrayList<Map<String, Object>> result = ConnectionDB.getQuery(sql, parametersSQL);
                    if(result.size() > 0){
                        String sql2 = "UPDATE booking SET name = ?, max_slot = ? WHERE id = ?";
                        Object[] parametersSQL2 = {name, slotMaxNum, idBooking};
                        if(ConnectionDB.UpdateDeleteQueryParameters(sql2, parametersSQL2) == 1){
                            JOptionPane.showMessageDialog(this, "Update Successful");  
                        }else{
                            JOptionPane.showMessageDialog(this, "Registration Fail");
                        }
                    }else{
                        JOptionPane.showMessageDialog(this, "The slotMax cant be less than current slot");
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "error");

        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditBooking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner currentSlot;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel module;
    private javax.swing.JTextField nameBooking;
    private javax.swing.JSpinner slotMax;
    // End of variables declaration//GEN-END:variables

    private void loadBooking() {
        try {
            String sql = "SELECT * FROM booking WHERE id = ?";  
            Object[] parameters = {idBooking};
            ArrayList<Map<String, Object>> result = ConnectionDB.getQuery(sql, parameters);
            for (Map<String, Object> map : result) {
                nameBooking.setText((String)map.get("name"));
                currentSlot.setValue((int)map.get("current_slot"));
                slotMax.setValue((int)map.get("max_slot"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error connection to Database");
        }
    }
    
    
}
